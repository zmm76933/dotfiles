# ワンライナーお手軽実行するためのファイル
#
# {書き方}
#     （例）
#          [これはワンライナーです] oneliner | some-command | other-command
#
#     []のなかにそのワンライナーの説明を書きます（省いても構いません）
#     []の後ろに1つ以上のスペースをあけてワンライナーを書きます
#
# {@マークについて}
#     ワンライナー中に@マークを1つだけ記述することができます
#     実行時にその@マークの位置にカーソルが置かれます
#
# {!マークについて}
#     ワンライナーの行末に!マークを置くと、ワンライナーが即座に実行されます
#
# {#マークについて}
#     2種類の使用方法があります
#     行頭に置かれた場合、その行はfzfに表示されません
#     行中に置いた場合、それ以降をコメントとみなし黒色表示します
#     ただし、後者の場合#マークの前後にスペースを必要とします
#
# {:マークについて}
#     セクションごとのタイトルに最適です
#     シェルが無視してくれる記号には#と:があります
#     #は行頭にあるとfzfが無視しますが、:は問題無いです
#

: 研究関連
# 2015年に出港したことがある漁船ナンバー
[Number per Month] echo ~/data/ika@/2015/**/*.txt C A -F, 3 S -u
# 今日、出港したことがある漁船ナンバー
[Number per Day] marine --all -l ika@ C A -F, 3 S -u
# 今日、出港したことがある漁船ナンバーを船名とともに表示する
[Number per Day detail] join -t, <(marine --all -l ika@ C A -F, 3 S -u) <(curl -sL http://i.buoy.jp/pkodg/ika.id N2)
# 登録されている漁船ナンバーと漁船名
[List Number All] curl -sL http://i.buoy.jp/pkodg/ika@.id N2
# 今日のログの中身を見る
[View Log of today] ls -ld ~/data/ika@/$(date +%Y/%m/%d)/*.txt | awk 'END{print $9}' X less +G
# 今日のログ一覧を見る（データ数が同じものを表示しない）
[Uniq LogList per Day] marine --all X ls -l U 5
[Uniq LogList per Day] marine --all X ls -l U 5 F A 9 X less +G

: 暗号関連
[ファイルの暗号化] openssl aes-256-cbc -e -in normal_file@ -out encrypted_file
[ファイルの復号] openssl aes-256-cbc -d -in encrypted_file@ -out decrypted_file
[ディレクトリを圧縮] tar zcf - some_dir@ | openssl aes-256-cbc -e -out hogehoge.tgz.enc
[ディレクトリから伸張] openssl aes-256-cbc -d -in hogehoge.tgz.enc@ | tar zxvf -

: fzf イディオム
[Unite的な使い方でVimを開く] fzf --prompt="unite.vim> " V ! #即実行
[最近開いたファイルをコピー] cp from to # from,toはグローバルエイリアス
[最近開いたファイルをVimで開く] vim from # fromはグローバルエイリアス
[最近開いたファイルをVimで開く] mru V ! #即実行

: その他
[galiasの重複がないかチェック] cat ${DOTPATH:?not set}/.zsh/30_aliases.zsh G '[A-Z]\+' G 'alias -g' | sed -E '/^ *#.*$/d;s/^.*alias -g ([A-Z0-9]+)=.*$/\1/' S | uniq -c G -v "^ *1" A 2
[tacがなければtail -rを出力] echo "${${${(M)${+commands[tac]}#1}:+tac}:-"tail -r"}"
[git logで使った絵文字を列挙] git log --oneline | grep -o ':\w\+:' | sort -u | if has emojify; then emojify; else cat -; fi
[テキストのコマンドの総行数] for file in $DOTPATH/bin/*; do file $file | grep -i "text" | cut -d: -f1 | xargs wc -l; done | awk '{m+=$1} END{print m}'
[lsとsedによる簡易treeコマンド] ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'

: gif アニメ
[logoを作成する] mov2gif -f --size 1500x500 --rate 13 ~/logo@.mov
[demo.gifを作成する] mov2gif -f --rate 13 ~/demo@.mov

: red_fat_
[進捗報告がシェル芸] is_git_repo && git log --oneline --shortstat $PREV_COMMIT@ | awk '!(NR%2){as+=$4;rs+=$6}END{printf "%d insertion(+), %d deletion(-)\n", as, rs}'

: git
[git rmを一括でやる] git status -s | awk '$1=="D"{print $2}' | xargs git rm
[tracked file を列挙] git --git-dir "`git rev-parse --git-dir`" -C "`git config core.worktree || pwd`" ls-files
[TORIAEZU!TORIAEZU!] cat -n ika_1125_120001_01.txt@ | awk -F, '{line[NR]=$0} NR>2000 && $10>4 {printf "%s\n%s\n%s\n%s\n", line[NR-3], line[NR-2], line[NR-1], line[NR]; exit}'

: なんやろ
[hoge] cat export-zplug-1484203911.json | jq -r '.[] | select(.action=="repo.transfer")'

# vim:ft=sh
